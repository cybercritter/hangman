#ifndef IPLAYER_H
#define IPLAYER_H

#include <set>
#include <string>

/**
 * Interface for player actions in a game. This interface defines the essential actions and information that a player in the game must provide. Implementers of this interface need to provide concrete definitions for the virtual methods specified here. 
 */
class IPlayer {


public:
	/**
	 * Virtual destructor for the IPlayer interface. This ensures that derived classes will have their destructors called properly when an IPlayer object is deleted. The default keyword specifies that the default implementation generated by the compiler should be used. 
	 */
	virtual ~IPlayer();

	/**
	 * Attempts to guess a letter in the game's word.
	 * letterThe letter to be guessed. True if the guessed letter is in the word, false otherwise. True if the guessed letter is in the word, false otherwise. 
	 */
	virtual bool guessLetter(/* The letter to be guessed.  */char letter) = 0;

	/**
	 * Retrieve the number of attempts remaining for the player.
	 * The number of attempts left as an unsigned 32-bit integer. The number of attempts left as an unsigned 32-bit integer. 
	 */
	virtual uint32_t getAttemptsLeft() = 0;

	/**
	 * Retrieves the set of letters that have been guessed by the player.
	 * A set containing the characters that have been guessed. A set containing the characters that have been guessed. 
	 */
	virtual std::set<char> getGuessedLetters() = 0;

	/**
	 * Retrieves the name of the player.
	 * A string representing the name of the player. A string representing the name of the player. 
	 */
	virtual std::string getName() = 0;

	/**
	 * Pure virtual function to display the current status of the player. This method should be overridden by any derived class to provide concrete implementation for displaying the player's status. 
	 */
	virtual void displayStatus() = 0;
};

#endif
